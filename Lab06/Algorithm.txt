;====================================================================
; Main.asm file generated by New Project wizard
;
; Created:   Вс ноя 14 2021
; Processor: PIC12F675
; Compiler:  MPASM (Proteus)
;====================================================================

;====================================================================
; DEFINITIONS
;====================================================================

#include p12f675.inc                ; Include register definition file
__CONFIG b'11111111010100'

;====================================================================
; CONSTANTS
;====================================================================

GPIO_DATA equ b'00101000' 
INTERRUPT_INIT equ b'11001000'
PIE1_INIT equ b'00000000'
TMR1H_INIT equ 0x0
TMR1L_INIT equ 0x0
TMR0_INIT equ 0x0
WPU_INIT equ b'010111'
IOC_INIT equ b'101000'
T1CON_INIT equ b'00000000'
;====================================================================
; VARIABLES
;====================================================================

sound_flags equ 20h
snd1_flag equ 00h
snd2_flag equ 01h
snd3_flag equ 02h

;LEDS_STATES equ 21h
;LED1 equ 00h
;LED2 equ 01h
;LED3 equ 02h

sound equ GP0

btn1 equ GP3
btn2 equ GP5

pc_states equ 21h
in_work_flag equ 00h
btn_wait_flag equ 01h
btn2_st equ 02h
btn3_st equ 03h

T1H_REG equ 22h
T1L_REG equ 23h

T02SecScaler equ 24h

LastPortState equ 25h

Accum equ 26h

Lcd_data equ 27h

Loop_ident equ 28h

;====================================================================
; RESET and INTERRUPT VECTORS
;====================================================================

      ; Reset Vector
RST   code  0x0 
      goto  START

INT code 0x4
	goto IINT_HNDL
	
	
;====================================================================
; CODE SEGMENT
;====================================================================

PGM   code

Init
	
	banksel ANSEL
    clrf ANSEL

    banksel CMCON
    movlw 0x7
    movwf CMCON

    banksel OPTION_REG
    movlw b'01001000'       ; Options
    movwf OPTION_REG

    banksel TRISIO
    movlw b'00101000'   ; GPIO Port options
    movwf TRISIO

    banksel GPIO
    movlw b'10' ; Default GPIO data
    movwf GPIO_DATA
    movwf GPIO

    banksel WPU
    movlw WPU_INIT  ; Pull ups
    movwf WPU

    banksel INTCON
    movlw INTERRUPT_INIT   ; Interrupts
    movwf INTCON

    banksel PIE1
    movlw PIE1_INIT  ; Enables timer 1 (16-bit) INTERRRUPT (NO)
    movwf PIE1

    banksel TMR1H
    movlw TMR1H_INIT
    movwf TMR1H
    movlw TMR1L_INIT
    movwf TMR1L

    banksel T1CON
    movlw T1CON_INIT    ; Enables timer 1
    movwf T1CON

    banksel IOC
    movlw IOC_INIT
    movwf IOC

	CALL SavePortStates
	
    return
	
	
IINT_HNDL
	btfsc INTCON,  GPIF
	GOTO GPIO_INT
	btfsc INTCON, T0IF
	GOTO T0_INT
	banksel PIR1
	btfsc PIR1, TMR1IF
	GOTO T1_INT
	return
	
	
	
	
; После старта микроконроллера микроконроллер автоматически переходит в режим "отправки сообщения"
; Если не пришёл старт-бит какого-то сообщения, то режим "отправки сообщения".

; Режим "отправки сообщения":
;	Загружаем счётчик на 8 бит в аккамулятор, а затем в регистр TEMP
;	Очистка текущего регистра посылок
;	Совершаем задерку на половина бода (для того, чтобы считывать каждый бит ровно в середине его сигнала, чтобы точно считать то, что нужно и вовремя.
;	Считывание пакета
;	 	Задержку на ровно один разряд(бод)
;		Очистка бита C в STATUS
;		Циклический сдвиг вправо SERBUF
;		Если на входе 1, переход к декрементации TEMP

		Декрементация TEMP
		Если 0, то пропуск команды (выход из цикла)
		GOTO Считывание пакета
		
		Задержка на 1 бод
		Если на входе 1 (9 бит), то запись в 9 поле 9 бита "0"
		иначе запись "1"
		return
		
	Отправка пакета
		Загрузка отправляемой константы в SERBUF
		Загрузка 9-го бита в поле 9-го бита
		Загрузка счётчика на 8 бит в аккамулятор
		Установка на выходе стартового бита (0!)
		Цикл:
			Сдвигаем вправо регистра SERBUF
			Проверка бита STATUS, C == 0
			Если C = 0, то устанавливаем выходной порт = 0
			Проверка бита STATUS, C == 1
			Если C = 1, то устанавливаем выходной порт = 1
			Зедержка на 1 бит 
			Декремент TEMP и пропустить команду (выход), если 0
			Иначе goto Цикл
		
		
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
; 